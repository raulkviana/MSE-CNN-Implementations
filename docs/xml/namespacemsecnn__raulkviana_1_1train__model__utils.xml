<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namespacemsecnn__raulkviana_1_1train__model__utils" kind="namespace" language="Python">
    <compoundname>msecnn_raulkviana::train_model_utils</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1afeee7ef82714dbc67d42e0c748e99114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.model_statistics</definition>
        <argsstring>(J_history, predicted, ground_truth, pred_vector, gt_vector, f1_list, recall_list, precision_list, accuracy_list, train_or_val=&quot;train&quot;)</argsstring>
        <name>model_statistics</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.model_statistics</qualifiedname>
        <param>
          <type>J_history</type>
          <defname>J_history</defname>
        </param>
        <param>
          <type>predicted</type>
          <defname>predicted</defname>
        </param>
        <param>
          <type>ground_truth</type>
          <defname>ground_truth</defname>
        </param>
        <param>
          <type>pred_vector</type>
          <defname>pred_vector</defname>
        </param>
        <param>
          <type>gt_vector</type>
          <defname>gt_vector</defname>
        </param>
        <param>
          <type>f1_list</type>
          <defname>f1_list</defname>
        </param>
        <param>
          <type>recall_list</type>
          <defname>recall_list</defname>
        </param>
        <param>
          <type>precision_list</type>
          <defname>precision_list</defname>
        </param>
        <param>
          <type>accuracy_list</type>
          <defname>accuracy_list</defname>
        </param>
        <param>
          <type>train_or_val</type>
          <defname>train_or_val</defname>
          <defval>&quot;train&quot;</defval>
        </param>
        <briefdescription>
<para>Evaluates model with metrics, such as accuracy and f1_score. </para>
        </briefdescription>
        <detaileddescription>
<para>This version plots the evolution of the metrics: f1-score, recall, precision, accuracy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">J_history</parametername>
</parameternamelist>
<parameterdescription>
<para>Loss function values over iterations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pred_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with vectors values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gt_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with vectors values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">train_or_val</parametername>
</parameternamelist>
<parameterdescription>
<para>String that is used to write on the image files names </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">f1</parametername>
</parameternamelist>
<parameterdescription>
<para>F1 score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">recall</parametername>
</parameternamelist>
<parameterdescription>
<para>Recall score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Precision score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy score </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="92" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="94" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1aaba41048718e061e48e3fef373b9f546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.right_size</definition>
        <argsstring>(CUs)</argsstring>
        <name>right_size</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.right_size</qualifiedname>
        <param>
          <type>CUs</type>
          <defname>CUs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>@brief Verify if the CU as the right size: height as to be lower than width

@param [in] CUs: Feature maps
@param [out] Boolean value indicating the right size
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="220" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="220" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a22037a90eee86799850c3a765e4da26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.compute_conf_matrix</definition>
        <argsstring>(predicted, ground_truth)</argsstring>
        <name>compute_conf_matrix</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.compute_conf_matrix</qualifiedname>
        <param>
          <type>predicted</type>
          <defname>predicted</defname>
        </param>
        <param>
          <type>ground_truth</type>
          <defname>ground_truth</defname>
        </param>
        <briefdescription>
<para>Computes the confusion matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy score </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="230" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="230" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a9208690996ff3dc9692f9e77f6e176a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.compute_top_k_accuracy</definition>
        <argsstring>(pred_vector, gt_vector, topk)</argsstring>
        <name>compute_top_k_accuracy</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.compute_top_k_accuracy</qualifiedname>
        <param>
          <type>pred_vector</type>
          <defname>pred_vector</defname>
        </param>
        <param>
          <type>gt_vector</type>
          <defname>gt_vector</defname>
        </param>
        <param>
          <type>topk</type>
          <defname>topk</defname>
        </param>
        <briefdescription>
<para>Computes the top k accuracy score. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with probabilities for each split (pytorch tensor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with single value (pytorch tensor) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">topk</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of best accuricies to choose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy score </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="257" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="257" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1ad9aeb6ce29f45cc766ba7320d34670c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.compute_num_splits_sent</definition>
        <argsstring>(pred_lst)</argsstring>
        <name>compute_num_splits_sent</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.compute_num_splits_sent</qualifiedname>
        <param>
          <type>pred_lst</type>
          <defname>pred_lst</defname>
        </param>
        <briefdescription>
<para>Computes the num of splits that would be analyzed by the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with probabilities values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of number of splits sent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="284" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="284" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1aa3cb64ee0fbaa82878681fac367eadf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.compute_multi_thres_performance</definition>
        <argsstring>(pred_lst, gt_lst)</argsstring>
        <name>compute_multi_thres_performance</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.compute_multi_thres_performance</qualifiedname>
        <param>
          <type>pred_lst</type>
          <defname>pred_lst</defname>
        </param>
        <param>
          <type>gt_lst</type>
          <defname>gt_lst</defname>
        </param>
        <briefdescription>
<para>Computes multi-threshold performance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with integer value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy score </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="299" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="299" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a2538c5927aded1286f7e8220ff22e9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.compute_ROC_curve</definition>
        <argsstring>(pred_vector, gt_vector, pred_num)</argsstring>
        <name>compute_ROC_curve</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.compute_ROC_curve</qualifiedname>
        <param>
          <type>pred_vector</type>
          <defname>pred_vector</defname>
        </param>
        <param>
          <type>gt_vector</type>
          <defname>gt_vector</defname>
        </param>
        <param>
          <type>pred_num</type>
          <defname>pred_num</defname>
        </param>
        <briefdescription>
<para>Computes ROC curve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pred_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions vectors (one-hot encoded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gt_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths vectors (one-hot encoded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pred_num</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the predicitons with numbers corresponding to partitions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>[out] figure: Figure with the ROC curve </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="318" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="318" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a964adadaca962cbcbc5078977779311b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.model_simple_metrics</definition>
        <argsstring>(predicted, ground_truth)</argsstring>
        <name>model_simple_metrics</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.model_simple_metrics</qualifiedname>
        <param>
          <type>predicted</type>
          <defname>predicted</defname>
        </param>
        <param>
          <type>ground_truth</type>
          <defname>ground_truth</defname>
        </param>
        <briefdescription>
<para>Evaluates model with metrics 4 metrics, such as accuracy, f1_score, recall and precision. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predicted</parametername>
</parameternamelist>
<parameterdescription>
<para>List of predictions made by the model with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ground_truth</parametername>
</parameternamelist>
<parameterdescription>
<para>List of the ground-truths with single value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">f1</parametername>
</parameternamelist>
<parameterdescription>
<para>F1 score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">recall</parametername>
</parameternamelist>
<parameterdescription>
<para>Recall score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">precision</parametername>
</parameternamelist>
<parameterdescription>
<para>Precision score </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accuracy</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy score </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="388" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="388" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a993070f8c8fdf03d09c5cc98c0ee31d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.obtain_best_modes</definition>
        <argsstring>(rs, pred)</argsstring>
        <name>obtain_best_modes</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.obtain_best_modes</qualifiedname>
        <param>
          <type>rs</type>
          <defname>rs</defname>
        </param>
        <param>
          <type>pred</type>
          <defname>pred</defname>
        </param>
        <briefdescription>
<para>Converts a prediction into a specific number that corresponds to the best way to split (non-split, quad tree, binary vert tree...) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rs</parametername>
</parameternamelist>
<parameterdescription>
<para>Thresholds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pred</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted values from the model with one-hot encoding </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted values with the number of the mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="408" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="408" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a9a466ae6eaee510daf4fdc575bf380cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.obtain_mode</definition>
        <argsstring>(pred)</argsstring>
        <name>obtain_mode</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.obtain_mode</qualifiedname>
        <param>
          <type>pred</type>
          <defname>pred</defname>
        </param>
        <briefdescription>
<para>Converts a prediction into a specific number that corresponds to the best way to split (non-split, quad tree, binary vert tree...) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pred</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted values from the model with one-hot encoding </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted values with the number of the mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="431" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="431" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a79494642e232d1c076a7b5fa7466b31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.one_hot_enc</definition>
        <argsstring>(tensor, num_classes=6)</argsstring>
        <name>one_hot_enc</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.one_hot_enc</qualifiedname>
        <param>
          <type>tensor</type>
          <defname>tensor</defname>
        </param>
        <param>
          <type>num_classes</type>
          <defname>num_classes</defname>
          <defval>6</defval>
        </param>
        <briefdescription>
<para>Implements one-hot encoding to a specific tensor with the set of split modes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with a set of split modes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_classes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number classes in the tensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">new_tensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Tensor with one-hot encoding implemented </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="444" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="444" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a3e657e72d3f33b63fbd784f87e3eb8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.print_parameters</definition>
        <argsstring>(model, optimizer)</argsstring>
        <name>print_parameters</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.print_parameters</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>optimizer</type>
          <defname>optimizer</defname>
        </param>
        <briefdescription>
<para>Prints the parameters from the state dictionaries of the model and optimizer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model that the parameters will be printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Optimizer that the parameters will be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="457" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="457" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1adb76e5e1e7fb9398be537a21810f4fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.save_model_parameters</definition>
        <argsstring>(dir_name, f_name, model)</argsstring>
        <name>save_model_parameters</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.save_model_parameters</qualifiedname>
        <param>
          <type>dir_name</type>
          <defname>dir_name</defname>
        </param>
        <param>
          <type>f_name</type>
          <defname>f_name</defname>
        </param>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <briefdescription>
<para>Saves only the model parameters to a specific folder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dir_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the directory where the parameters will be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file that the parameters will be saved on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be saved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="484" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="484" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1af861829fd2bb377d08cf101471987aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.save_model</definition>
        <argsstring>(dir_name, f_name, model, optimizer, loss, acc)</argsstring>
        <name>save_model</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.save_model</qualifiedname>
        <param>
          <type>dir_name</type>
          <defname>dir_name</defname>
        </param>
        <param>
          <type>f_name</type>
          <defname>f_name</defname>
        </param>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>optimizer</type>
          <defname>optimizer</defname>
        </param>
        <param>
          <type>loss</type>
          <defname>loss</defname>
        </param>
        <param>
          <type>acc</type>
          <defname>acc</defname>
        </param>
        <briefdescription>
<para>Saves the parameters of the model and of the optimizer, and also the loss and the accuracy. </para>
        </briefdescription>
        <detaileddescription>
<para>These are saved into the folder specified by the user.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dir_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the directory where the parameters will be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the file that the parameters will be saved on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Optimizer which the parameters will be saved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">loss</parametername>
</parameternamelist>
<parameterdescription>
<para>Loss value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">acc</parametername>
</parameternamelist>
<parameterdescription>
<para>Accuracy value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="506" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="506" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a6d4bba83279a0482b9d5c1b0d006b18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_parameters_stg</definition>
        <argsstring>(model, path, stg, dev)</argsstring>
        <name>load_model_parameters_stg</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_parameters_stg</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>stg</type>
          <defname>stg</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>Loads all stages but make sure that the stage number &apos;stg&apos; has the same parameters has the previous. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stg</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer containing the last stage number to load </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device do load the model to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model loaded tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="535" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="535" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a335386ac8c610e1db1871d3700b6ad98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_parameters_eval</definition>
        <argsstring>(model, path, dev)</argsstring>
        <name>load_model_parameters_eval</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_parameters_eval</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>Loads all stages, meant to be used with the eval_model script. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device do load the model to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model loaded tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="586" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="586" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a1a11d507d70a0c1706812d23ba767eac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_stg_12_stg_3</definition>
        <argsstring>(model, path, dev)</argsstring>
        <name>load_model_stg_12_stg_3</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_stg_12_stg_3</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>THis function makes it possible to load parameters from the first and second stage to the third. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded, with 2 models (one for the first and second stage, and another for the third stage) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to load the model to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="620" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="620" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a7fc7ec27e310efc1d10ea490dd27cddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_stg_3_stg_4</definition>
        <argsstring>(model, path, dev)</argsstring>
        <name>load_model_stg_3_stg_4</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_stg_3_stg_4</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>This function makes it possible to load parameters from the third stage to the fourth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded, with 2 models (one for the first and second stage, and another for the third stage) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to load the model to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="674" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="674" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a02cbf7d191b5968da6f4731d8ae10e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_stg_4_stg_5</definition>
        <argsstring>(model, path, dev)</argsstring>
        <name>load_model_stg_4_stg_5</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_stg_4_stg_5</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>This function makes it possible to load parameters from the fourth stage to the fith. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded, with 2 models (one for the first and second stage, and another for the third stage) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to load the model to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="735" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="735" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a58a16083e57ad4844a6ae858342363d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.load_model_stg_5_stg_6</definition>
        <argsstring>(model, path, dev)</argsstring>
        <name>load_model_stg_5_stg_6</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.load_model_stg_5_stg_6</qualifiedname>
        <param>
          <type>model</type>
          <defname>model</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <param>
          <type>dev</type>
          <defname>dev</defname>
        </param>
        <briefdescription>
<para>This function makes it possible to load parameters from the fourth stage to the fith. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">model</parametername>
</parameternamelist>
<parameterdescription>
<para>Model which the parameters will be loaded, with 2 models (one for the first and second stage, and another for the third stage) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path/Folder containing the files that are supposed to be loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to load the model to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="815" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="815" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="namespacemsecnn__raulkviana_1_1train__model__utils_1a9f287edd155c2f5ca644e55b1e12f738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>msecnn_raulkviana.train_model_utils.print_current_time</definition>
        <argsstring>()</argsstring>
        <name>print_current_time</name>
        <qualifiedname>msecnn_raulkviana.train_model_utils.print_current_time</qualifiedname>
        <briefdescription>
<para>Prints current time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="912" column="1" bodyfile="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" bodystart="912" bodyend="924"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>@package docstring 

@file train_model_utils.py 

@brief Group of functions that are supposed to be used directly in the training or evaluation scripts
 
@section libraries_train_model_utils Libraries 
- os
- torch
- numpy
- matplotlib.pyplot
- dataset_utils
- seaborn
- itertools
- datetime
- sklearn.metrics

@section classes_train_model_utils Classes 
- None
 
@section functions_train_model_utils Functions 
- model_statistics(J_history, predicted, ground_truth, pred_vector, gt_vector,
- compute_conf_matrix(predicted, ground_truth)
- compute_top_k_accuracy(pred_vector, gt_vector, topk)
- compute_num_splits_sent(pred_lst)
- compute_multi_thres_performance(pred_lst, gt_lst)
- compute_ROC_curve(pred_vector, gt_vector, pred_num)
- model_simple_metrics(predicted, ground_truth)
- obtain_best_modes(rs, pred)
- obtain_mode(pred)
- one_hot_enc(tensor, num_classes=6)
- print_parameters(model, optimizer)
- save_model_parameters(dir_name, f_name, model)
- save_model(dir_name, f_name, model, optimizer, loss, acc)
- load_model_parameters_stg(model, path, stg, dev)
- load_model_parameters_eval(model, path, dev)
- load_model_stg_12_stg_3(model, path, dev)
- load_model_stg_3_stg_4(model, path, dev)
- load_model_stg_4_stg_5(model, path, dev)
- load_model_stg_5_stg_6(model, path, dev)
- print_current_time()
 
@section global_vars_train_model_utils Global Variables 
- None

@section todo_train_model_utils TODO 
- None
    
@section license License 
MIT License 
Copyright (c) 2022 Raul Kevin do Espirito Santo Viana
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@section author_train_model_utils Author(s)
- Created by Raul Kevin Viana
- Last time modified is 2023-01-29 22:22:04.154941
</verbatim> </para>
    </detaileddescription>
    <location file="C:/Users/Raul/Documents/GitHub/MSE-CNN-Implementations/src/msecnn_raulkviana/train_model_utils.py" line="1" column="1"/>
  </compounddef>
</doxygen>
