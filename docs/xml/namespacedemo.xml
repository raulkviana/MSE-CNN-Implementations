<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.7" xml:lang="en-US">
  <compounddef id="namespacedemo" kind="namespace" language="Python">
    <compoundname>demo</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedemo_1a1ffe6e3cd2dc1ac0f02221e6a602076e" prot="public" static="no" mutable="no">
        <type>str</type>
        <definition>str demo.PATH_TO_COEFFS</definition>
        <argsstring></argsstring>
        <name>PATH_TO_COEFFS</name>
        <qualifiedname>demo.PATH_TO_COEFFS</qualifiedname>
        <initializer>=  &quot;../../../model_coefficients/best_coefficients&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="99" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a4ae3993910053aa131604b676b2b9b5b" prot="public" static="no" mutable="no">
        <type>str</type>
        <definition>str demo.LOAD_IMAGE_ERROR</definition>
        <argsstring></argsstring>
        <name>LOAD_IMAGE_ERROR</name>
        <qualifiedname>demo.LOAD_IMAGE_ERROR</qualifiedname>
        <initializer>=  &quot;load_image_error.png&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="100" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a2bc429d4870d31c755fb116740d1ce98" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list demo.EXAMPLE_IMGS</definition>
        <argsstring></argsstring>
        <name>EXAMPLE_IMGS</name>
        <qualifiedname>demo.EXAMPLE_IMGS</qualifiedname>
        <initializer>=  [&quot;example_img_1.jpeg&quot;, &quot;example_img_2.jpeg&quot;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="101" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1adf10c69ec4657142f4f267187d122a6c" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple demo.CTU_SIZE</definition>
        <argsstring></argsstring>
        <name>CTU_SIZE</name>
        <qualifiedname>demo.CTU_SIZE</qualifiedname>
        <initializer>=  (128, 128)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="102" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a1594ea1937c3d920662fa9cfc3dbb270" prot="public" static="no" mutable="no">
        <type></type>
        <definition>demo.FIRST_CU_POS</definition>
        <argsstring></argsstring>
        <name>FIRST_CU_POS</name>
        <qualifiedname>demo.FIRST_CU_POS</qualifiedname>
        <initializer>=  torch.tensor([0, 0]).reshape(shape=(-1, 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="103" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a34b51838a0c3c81063aef8f9681a8713" prot="public" static="no" mutable="no">
        <type></type>
        <definition>demo.FIRST_CU_SIZE</definition>
        <argsstring></argsstring>
        <name>FIRST_CU_SIZE</name>
        <qualifiedname>demo.FIRST_CU_SIZE</qualifiedname>
        <initializer>=  torch.tensor([64, 64]).reshape(shape=(-1, 2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="104" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a15b916246f9a785f3f6245992c5d977a" prot="public" static="no" mutable="no">
        <type>str</type>
        <definition>str demo.DEV</definition>
        <argsstring></argsstring>
        <name>DEV</name>
        <qualifiedname>demo.DEV</qualifiedname>
        <initializer>=  &quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="105" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a1df2470ebb2a9b35a525161c2eadc7b6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int demo.QP</definition>
        <argsstring></argsstring>
        <name>QP</name>
        <qualifiedname>demo.QP</qualifiedname>
        <initializer>=  32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="106" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1afdaa6b6d6a72de879b40e4d6824a0c35" prot="public" static="no" mutable="no">
        <type></type>
        <definition>demo.model</definition>
        <argsstring></argsstring>
        <name>model</name>
        <qualifiedname>demo.model</qualifiedname>
        <initializer>=  None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="107" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1abdabd8cda08cf10aa7685de8f0649d8d" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple demo.COLOR</definition>
        <argsstring></argsstring>
        <name>COLOR</name>
        <qualifiedname>demo.COLOR</qualifiedname>
        <initializer>=  (0, 247, 255)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="108" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1ac2603db04f1bfc85f8fa64e342951507" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int demo.LINE_THICKNESS</definition>
        <argsstring></argsstring>
        <name>LINE_THICKNESS</name>
        <qualifiedname>demo.LINE_THICKNESS</qualifiedname>
        <initializer>=  1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="109" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedemo_1a34fa5992eca6d94863dfbf9e9d88bdaf" prot="public" static="no" mutable="no">
        <type>str</type>
        <definition>str demo.DEFAULT_TEXT_FOR_COORDS</definition>
        <argsstring></argsstring>
        <name>DEFAULT_TEXT_FOR_COORDS</name>
        <qualifiedname>demo.DEFAULT_TEXT_FOR_COORDS</qualifiedname>
        <initializer>=  &quot;Insert CTU position in the image...&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="110" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedemo_1a17011f58771c2514a5eda7f101c3692b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.setup_model</definition>
        <argsstring>()</argsstring>
        <name>setup_model</name>
        <qualifiedname>demo.setup_model</qualifiedname>
        <briefdescription>
<para>Initializes and load the parameters of the MSE-CNN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="116" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="116" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1a17944feff814fff559d662b0f204ba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.int2label</definition>
        <argsstring>(split)</argsstring>
        <name>int2label</name>
        <qualifiedname>demo.int2label</qualifiedname>
        <param>
          <type>split</type>
          <defname>split</defname>
        </param>
        <briefdescription>
<para>Obtain the string that corresponds to an integer value of the split. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">split</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer number representing the split tht the model chose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">str_split</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the corresponding split </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="133" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="133" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1ab8600c64de65acea972fc88b9f2243c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.draw_partition</definition>
        <argsstring>(img, split, cu_pos, cu_size)</argsstring>
        <name>draw_partition</name>
        <qualifiedname>demo.draw_partition</qualifiedname>
        <param>
          <type>img</type>
          <defname>img</defname>
        </param>
        <param>
          <type>split</type>
          <defname>split</defname>
        </param>
        <param>
          <type>cu_pos</type>
          <defname>cu_pos</defname>
        </param>
        <param>
          <type>cu_size</type>
          <defname>cu_size</defname>
        </param>
        <briefdescription>
<para>Draw partition in image based in the split outputed by the model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>User&apos;s input image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cu_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>CU position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cu_size</parametername>
</parameternamelist>
<parameterdescription>
<para>CU size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">split</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer number representing the split that the model chose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">str_split</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the corresponding split </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="155" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="155" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1adc15d43f2886217e33a93d362cadf0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.split_fm</definition>
        <argsstring>(cu, cu_pos, split)</argsstring>
        <name>split_fm</name>
        <qualifiedname>demo.split_fm</qualifiedname>
        <param>
          <type>cu</type>
          <defname>cu</defname>
        </param>
        <param>
          <type>cu_pos</type>
          <defname>cu_pos</defname>
        </param>
        <param>
          <type>split</type>
          <defname>split</defname>
        </param>
        <briefdescription>
<para>Splits feature maps in specific way. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cu</parametername>
</parameternamelist>
<parameterdescription>
<para>Input to the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cu_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Coordinate of the CU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">split</parametername>
</parameternamelist>
<parameterdescription>
<para>Way to split CU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cu_out</parametername>
</parameternamelist>
<parameterdescription>
<para>New Feature maps </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cu_pos_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the new CUs </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="205" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="205" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1aef29d63c9c71d261da8eaff42f5f55af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.partition_img</definition>
        <argsstring>(img, img_yuv)</argsstring>
        <name>partition_img</name>
        <qualifiedname>demo.partition_img</qualifiedname>
        <param>
          <type>img</type>
          <defname>img</defname>
        </param>
        <param>
          <type>img_yuv</type>
          <defname>img_yuv</defname>
        </param>
        <briefdescription>
<para>Partitions a full 128x128 CTU and draws the partition in the original image. </para>
        </briefdescription>
        <detaileddescription>
<para>TODO: Instead of obtaining the best split, do the thresholding and then split it until you find the right type of split</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image in BGR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">img_yuv</parametername>
</parameternamelist>
<parameterdescription>
<para>Image in YUV </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stg</parametername>
</parameternamelist>
<parameterdescription>
<para>Current stage being partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cu_pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Current stage being partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cu_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Current stage being partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image in with partitions drawn to it </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="261" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="261" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1a5a73f194ee64b84d4b8b0ce645f42983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.pipeline</definition>
        <argsstring>(img, text)</argsstring>
        <name>pipeline</name>
        <qualifiedname>demo.pipeline</qualifiedname>
        <param>
          <type>img</type>
          <defname>img</defname>
        </param>
        <param>
          <type>text</type>
          <defname>text</defname>
        </param>
        <briefdescription>
<para>Pipeline to implement the functionalities to demonstrate the potential of the MSE-CNN. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image in RGB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mod_img</parametername>
</parameternamelist>
<parameterdescription>
<para>Modified image with drawings into it in RGB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">best_split</parametername>
</parameternamelist>
<parameterdescription>
<para>Best split (BTV, BTH, TTV, TTH, Non-split, QT) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="375" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="375" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="namespacedemo_1a9a7eee49297dfd617496f5bb2914b837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>demo.main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <qualifiedname>demo.main</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/msecnn_raulkviana/demo/demo.py" line="419" column="1" bodyfile="src/msecnn_raulkviana/demo/demo.py" bodystart="419" bodyend="438"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>@package docstring 

@file demo.py 

@brief Demonstration of the application of the MSE-CNN 

Note: In order to run this script, you have to do it inside the folder

@section libraries_demo Libraries 
- msecnn
- train_model_utils
- cv2
- dataset_utils
- re
- sys
- numpy
- gradio
- torch
- custom_dataset
- PIL
 
@section classes_demo Classes 
- None 

@section functions_demo Functions 
- setup_model()
- int2label(split)
- draw_partition(img, split, cu_pos, cu_size)
- split_fm(cu, cu_pos, split)
- partition_img(img, img_yuv)
- pipeline(img, text)
- main()

@section global_vars_demo Global Variables 
- PATH_TO_COEFFS
- LOAD_IMAGE_ERROR
- EXAMPLE_IMGS
- CTU_SIZE
- FIRST_CU_POS
- FIRST_CU_SIZE
- DEV
- QP
- model
- COLOR
- LINE_THICKNESS
- DEFAULT_TEXT_FOR_COORDS

@section todo_demo TODO 
- Instead of obtaining the best split, do the thresholding and then split it until you find the right type of split 

@section license License 
MIT License 
Copyright (c) 2022 Raul Kevin do Espirito Santo Viana
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@section author_demo Author(s)
- Created by Raul Kevin Viana
- Last time modified is 2023-09-10 21:00:10.225508
</verbatim> </para>
    </detaileddescription>
    <location file="src/msecnn_raulkviana/demo/demo.py" line="1" column="1"/>
  </compounddef>
</doxygen>
